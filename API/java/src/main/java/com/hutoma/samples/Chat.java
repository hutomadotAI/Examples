package com.hutoma.samples;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import com.hutoma.samples.response.Result;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

public class Chat {

    static String encoding = java.nio.charset.StandardCharsets.UTF_8.name();

    static String apiRoot = "https://api.hutoma.com/v1";

    // id of the AI that we want to talk to
    static String aiId = "ADD_YOUR_CLIENT_KEY_HERE";

    // the authorization token to access the AI
    static String authToken = "ADD_YOUR_CLIENT_KEY_HERE";

    // Gson de/serializer
    private Gson gson;

    // tracks the current chat
    private String chatId = "";

    // history needs to be tracked and returned to the chat server
    private String history = "";

    public static void main(String[] args) {
        new Chat().inputLoop();
    }

    public void inputLoop() {

        // create scanner and de/serializer
        Scanner scanner = new Scanner(System.in);
        this.gson = new GsonBuilder().create();

        try {
            while (true) {

                // get a line of text from the user
                System.out.print("You:");
                String input = scanner.nextLine();

                // generate a URL with this data
                URL url = prepareUrl(apiRoot, aiId, input, this.chatId, this.history);

                // create a new connection
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();

                // set the authorization header
                connection.setRequestProperty("Authorization", String.format("Bearer %s", authToken));

                // make the connection and get the response code
                connection.connect();
                int responseCode = connection.getResponseCode();

                // read an input stream; either the input or the error depending on the HTTP response code
                try (InputStream inputStream = (responseCode == HttpURLConnection.HTTP_OK)
                        ? connection.getInputStream() : connection.getErrorStream()) {

                    // try to deserialize the input stream from JSON
                    Result result = deserialize(inputStream);

                    // if the call succeeded then we have a Result that contains a ChatResult object
                    if (result.getStatus().getCode() == HttpURLConnection.HTTP_OK) {

                        // print the answer
                        System.out.print("AI:");
                        System.out.println(result.getResult().getAnswer());

                        // keep track of the chatID and history for the next line of text
                        this.chatId = result.getChatId();
                        this.history = result.getResult().getHistory();
                    } else {

                        // otherwise all we have is a Result with a Status object (no ChatResult)
                        // so print the code and the info to get more information on what went wrong
                        System.out.println(String.format("Error %d: %s", result.getStatus().getCode(), result.getStatus().getInfo()));
                    }
                } catch (JsonSyntaxException jse) {
                    // if the error was not generated by the chat server (e.g. an error 502) then
                    // JSON deserialisation will fail
                    // in this case, print the HTTP info that we have
                    System.out.println(String.format("Error %d: %s", responseCode, connection.getResponseMessage()));

                } catch (IOException e) {
                    // any other io exception
                    System.out.println("Error " + e);
                }
            }
        } catch (Exception e) {
            // anything else gets caught here (e.g. malformed URL or URL encoding exceptions)
            System.out.println("Failed with exception " + e);
        }
    }

    /***
     * Take an InputStream and deserialize a valid Result object out of it
     * @param stream
     * @return Result object
     */
    private Result deserialize(InputStream stream) {
        return this.gson.fromJson(new InputStreamReader(stream, StandardCharsets.UTF_8), Result.class);
    }

    /***
     * Generate a valid url to call the chat API
     * @param apiRoot the root part of the URL
     * @param aiId the ID for this AI
     * @param question the plaintext question to ask
     * @param chatId the ID of the conversation, or empty string to start a new one
     * @param history history passed back from the last chat, or empty string if there was none
     * @return formatted URL as a string
     * @throws UnsupportedEncodingException
     * @throws MalformedURLException
     */
    private URL prepareUrl(String apiRoot, String aiId, String question, String chatId, String history) throws UnsupportedEncodingException, MalformedURLException {
        String query = String.format("q=%s&chatId=%s&history=%s",
                URLEncoder.encode(question, encoding),
                URLEncoder.encode(chatId, encoding),
                URLEncoder.encode(history, encoding));
        String url = String.format("%s/ai/%s/chat?%s",
                apiRoot, aiId, query);
        return new URL(url);
    }
}
